package me.bsc23me.sao;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import me.bsc23me.sao.cutscenes.Intro;
import me.bsc23me.sao.magic.FeignDeath;
import me.bsc23me.sao.magic.FireWall;
import me.bsc23me.sao.magic.GroundBoost;
import me.bsc23me.sao.magic.Heal;
import me.bsc23me.sao.magic.Jump;
import me.bsc23me.sao.magic.Magic;
import me.bsc23me.sao.magic.NightVision;
import me.bsc23me.sao.magic.Nullify;
import me.bsc23me.sao.magic.Repulse;
import me.bsc23me.sao.magic.Slow;
import me.bsc23me.sao.magic.Speed;
import me.bsc23me.sao.magic.Warp;
import me.bsc23me.sao.mounts.BasicMount;
import me.bsc23me.sao.mounts.CustomPig;
import me.bsc23me.sao.mounts.FellBeast;
import me.bsc23me.sao.skills.Mining;
import me.bsc23me.sao.skills.Smithing;
import me.bsc23me.sao.townBorders.WhiteHavens;
import net.minecraft.server.v1_8_R1.EntityInsentient;
import net.minecraft.server.v1_8_R1.EntityTypes;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.command.BlockCommandSender;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.inventory.FurnaceRecipe;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapelessRecipe;
import org.bukkit.material.MaterialData;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

public class Main extends JavaPlugin{

	static final Logger log = Logger.getLogger("Minecraft");
	static PluginManager pm = Bukkit.getServer().getPluginManager();
	static Magic magic = new Magic();
	static BlockListener bl = new BlockListener();
	static Magician magician = new Magician();
	static PlayerListener pl = new PlayerListener();
	static Damage damage = new Damage();
	static Warp warp = new Warp();
	static Heal heal = new Heal();
	static MobListener ml = new MobListener();
	static Spawner spawner = new Spawner();
	static SkillMaster skill = new SkillMaster();
	static Bank bank = new Bank();
	static NightVision nv = new NightVision();
	static Nullify nullify = new Nullify();
	static Speed speed = new Speed();
	static TestChangeLore tcl = new TestChangeLore();
	static ItemTrader it = new ItemTrader();
	static Repulse repulse = new Repulse();
	static Jump jump = new Jump();
	static FeignDeath fd = new FeignDeath();
	static Slow slow = new Slow();
	static FireWall fireWall = new FireWall();
	static GroundBoost gb = new GroundBoost();
	static BarTender bt = new BarTender();
	static TreasureCollecter tc = new TreasureCollecter();
	static Smithing smithing = new Smithing();
	static Mining mining = new Mining();
	static AnimalTamer at = new AnimalTamer();
	static BasicMount horse = new BasicMount();
	static PoisonDagger poisonDagger = new PoisonDagger();
	static BOSSTheInfected infected = new BOSSTheInfected();


	@SuppressWarnings("deprecation")
	YamlConfiguration yc =YamlConfiguration.loadConfiguration(getResource("config.yml"));
	File cf = new File(getDataFolder(), "config.yml");

	@SuppressWarnings("deprecation")
	public void loadWorlds(){
		if(cf.exists()){
			yc = YamlConfiguration.loadConfiguration(cf);
		}else{
			yc = YamlConfiguration.loadConfiguration(getResource("config.yml"));
		}
	}

	@SuppressWarnings("unchecked")
	public void registerEntity(String name, int id, Class<? extends EntityInsentient> customClass) {
		try {
			List<Map<?, ?>> dataMaps = new ArrayList<Map<?, ?>>();
			for(Field f : EntityTypes.class.getDeclaredFields()) {
				if(f.getType().getSimpleName().equals(Map.class.getSimpleName())) {
					f.setAccessible(true);
					dataMaps.add((Map<?, ?>) f.get(null));
				}
			}
			((Map<Class<? extends EntityInsentient>, String>) dataMaps.get(1)).put(customClass, name);
			((Map<Class<? extends EntityInsentient>, Integer>) dataMaps.get(3)).put(customClass, id);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void onEnable(){
		if(!new File(this.getDataFolder(), "config.yml").exists()){
			this.saveDefaultConfig();
		}else{
			loadWorlds();
		}
		this.getConfig().createSection("SAO.Weapons");
		log.info("[SAO] has been Enabled!");

		pm.registerEvents(ml, this);
		pm.registerEvents(bl, this);
		pm.registerEvents(magician, this);
		pm.registerEvents(pl, this);
		pm.registerEvents(damage, this);
		pm.registerEvents(warp, this);
		pm.registerEvents(heal, this);
		pm.registerEvents(magic, this);
		pm.registerEvents(spawner, this);
		pm.registerEvents(skill, this);
		pm.registerEvents(bank, this);
		pm.registerEvents(nv, this);
		pm.registerEvents(nullify, this);
		pm.registerEvents(speed, this);
		pm.registerEvents(tcl, this);
		pm.registerEvents(it, this);
		pm.registerEvents(repulse, this);
		pm.registerEvents(jump, this);
		pm.registerEvents(fd, this);
		pm.registerEvents(slow, this);
		pm.registerEvents(fireWall, this);
		pm.registerEvents(gb, this);
		pm.registerEvents(bt, this);
		pm.registerEvents(tc, this);
		pm.registerEvents(smithing, this);
		pm.registerEvents(mining, this);
		pm.registerEvents(at, this);
		pm.registerEvents(horse, this);
		//pm.registerEvents(poisonDagger, this);
		pm.registerEvents(infected, this);
		pm.registerEvents(new WhiteHavens(), this);
		pm.registerEvents(new FellBeast(), this);

		this.registerEntity("Pig", 90, CustomPig.class);

		Bukkit.clearRecipes();

		Bukkit.addRecipe(new FurnaceRecipe(Smithing.customItem(new ItemStack(Material.IRON_INGOT), ChatColor.WHITE+"Iron Ingot", ChatColor.GRAY+"A bar of "+ChatColor.UNDERLINE+"iron"), Material.IRON_ORE));
		ShapelessRecipe horse = new ShapelessRecipe(Smithing.customItem(new ItemStack(Material.MONSTER_EGG, 1, (short) 100), ChatColor.WHITE+"Horse", ChatColor.GRAY+"Spawns a horse", ChatColor.GREEN+"Rideable"));
		horse.addIngredient(1, new MaterialData(Material.MONSTER_EGG, (byte) 100));
		horse.addIngredient(Material.APPLE);
		Bukkit.addRecipe(horse);
	}

	@Override
	public void onDisable(){
		log.info("[SAO] has been Disabled!");
	}

	@SuppressWarnings("deprecation")
	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args){
		if(label.equalsIgnoreCase("sync")){
			Player player = (Player) sender;
			File playerDataFile = new File("plugins/SAO/players/"+player.getName()+".yml");
			FileConfiguration playerData = new YamlConfiguration();
			try {
				playerData.load(playerDataFile);
				playerData.set("Player.health", CustomPlayer.health);
			} catch (Exception e) {

			}
			return true;
		}else if(label.equalsIgnoreCase("levelup")){
			Player player = (Player) sender;
			CustomPlayer.LevelUp(player);


		}else if(label.equalsIgnoreCase("level")){
			Player player = (Player) sender;
			File playerDataFile = new File("plugins/SAO/players/"+player.getName()+".yml");
			FileConfiguration playerData = new YamlConfiguration();
			try{
				playerData.load(playerDataFile);
				int level = playerData.getInt("Player.level");
				player.sendMessage("config level is "+level);
				player.sendMessage("CustomPlayer level is "+CustomPlayer.getPlayerLevel(player));
			}catch(Exception e){
				player.sendMessage(ChatColor.RED+"Error: Could not load your player data!");
			}
		}else if(label.equalsIgnoreCase("createspawner")){
			Player player = (Player) sender;
			Block b = player.getLocation().getBlock();

			try{
				int r = Integer.parseInt(args[0]);

				List<Block> circle = Spawner.createCircle(b, r);
				Spawner.spawners.add(circle);
				Spawner.saveCircles();
			}catch(Exception e){
				player.sendMessage(ChatColor.RED+"Warning: Radius must be number!");
			}

		}else if(label.equalsIgnoreCase("togglespawners")){
			if(args[0].equalsIgnoreCase("true")){
				for(List<Block> list : Spawner.spawners){
					for(Block b : list){
						b.setType(Material.GLASS);
					}
				}
			}else if(args[0].equalsIgnoreCase("false")){
				for(List<Block> list : Spawner.spawners){
					for(Block b : list){
						b.setType(Material.AIR);
					}
				}
			}else{

			}
		}else if(label.equalsIgnoreCase("monster")){
			Player player = (Player) sender;
			Spawner.spawnMob(args[0], player.getLocation());
		}else if(label.equalsIgnoreCase("spell")){
			Player player =(Player) sender;
			player.sendMessage("Spells:");
			player.sendMessage("  usage <magic type> <spell aspect> <modifier>");
			player.sendMessage("  Aspects:");
			player.sendMessage("    air aln anm arm aur clo cps cre");
			player.sendMessage("    cro drk die dst ter eng flm flt");
			player.sendMessage("    dmg gla grd hvs hel hmn hng ice");
			player.sendMessage("    lif lgt mch mtl min mov odr plt");
			player.sendMessage("    psn sed slm sol stn stm tht tol");
			player.sendMessage("    trd trp tvl uud vod str wpn wod");

		}else if(label.equalsIgnoreCase("mythril")){
			Player player = (Player) sender;
			player.sendMessage("Mythril: "+CustomPlayer.getPlayerMoney(player));
		}else if(label.equalsIgnoreCase("setmythril")){
			Player player = (Player) sender;
			if(args.length < 1){
				player.sendMessage("/setmythril <amount> <player>");
			}else if(args.length == 1){
				try{
					int amt = Integer.parseInt(args[0]);
					CustomPlayer.setPlayerMoney(player, amt);
					player.sendMessage("Money set to "+amt);
				}catch(Exception e){
					player.sendMessage(ChatColor.RED+"Invalid argument: amount must be integer!");
				}
			}else if(args.length == 2){
				try{
					int amt = Integer.parseInt(args[0]);
					CustomPlayer.setPlayerMoney(Bukkit.getPlayer(args[1]), amt);
					player.sendMessage("Money set to "+amt);
					Bukkit.getPlayer(args[0]).sendMessage("Money set to "+amt);
				}catch(Exception e){
					player.sendMessage(ChatColor.RED+"Invalid argument: /setmythril <amount> <player>");
				}
			}
		}else if(label.equalsIgnoreCase("addmythril")){
			if(sender instanceof Player){
				Player player = (Player) sender;
				if(args.length < 1){
					player.sendMessage(ChatColor.RED+"/addmythril <amount> <player>");
				}else if(args.length == 1){
					try{
						int amt = Integer.parseInt(args[0]);
						CustomPlayer.setPlayerMoney(player, CustomPlayer.getPlayerMoney(player) + amt);
						player.sendMessage("Money set to: "+CustomPlayer.getPlayerMoney(player));
					}catch(Exception e){
						player.sendMessage(ChatColor.RED+"Invalid argument: amount must be integer!");
					}
				}else if(args.length == 2){
					try{
						int amt = Integer.parseInt(args[0]);
						CustomPlayer.setPlayerMoney(Bukkit.getPlayer(args[1]), CustomPlayer.getPlayerMoney(player)+amt);
						player.sendMessage("Money set to "+CustomPlayer.getPlayerMoney(player));
						Bukkit.getPlayer(args[0]).sendMessage("Money set to "+CustomPlayer.getPlayerMoney(player));
					}catch(Exception e){
						player.sendMessage(ChatColor.RED+"Invalid argument: /addmythril <amount> <player>");
					}
				}
			}else{
				if(args.length == 2){
					try{
						int amt = Integer.parseInt(args[0]);
						Player player = Bukkit.getPlayer(args[1]);
						CustomPlayer.setPlayerMoney(player, CustomPlayer.getPlayerMoney(player)+amt);
						player.sendMessage("Money set to "+CustomPlayer.getPlayerMoney(player));
						Bukkit.getPlayer(args[0]).sendMessage("Money set to "+CustomPlayer.getPlayerMoney(player));
					}catch(Exception e){
						log.info(ChatColor.RED+"Invalid argument: /addcol <amount> <player>");
					}
				}else{
					sender.sendMessage(ChatColor.RED+"Invalid argument: /addcol <amount> <player>");
				}
			}

		}else if(label.equalsIgnoreCase("boss")){
			if(args.length < 2){
				sender.sendMessage("Invalid Arguments: /boss <bossname> [args]");
			}else if(args[0].equalsIgnoreCase("Infected")){
				if(args[1].equalsIgnoreCase("health")){
					if(args.length != 3){
						sender.sendMessage("no health input");
					}else{
						try{
							double health = Integer.parseInt(args[2]);
							for(Entity e : Bukkit.getWorld("ALO").getEntities()){
								if(e instanceof LivingEntity){
									if(e.getType() == EntityType.ENDER_DRAGON && ((LivingEntity) e).getCustomName().equalsIgnoreCase("The Infected")){
										if(health > 0){
											((LivingEntity) e).setHealth(health);
										}else{
											((LivingEntity) e).setHealth(1d);
											e.remove();
											e.getVehicle().remove();
										}
									}else{

									}
								}
							}
						}catch(Exception e){

						}
					}
				}else if(args[1].equalsIgnoreCase("phase")){
					if(args.length != 3){
						sender.sendMessage("Invalid Arguments: /boss <bossname> phase <phase number>");
					}else{
						try{
							int phase = Integer.parseInt(args[2]);
							switch(phase){
							case 1:
								Bukkit.getWorld("ALO").spawnEntity(new Location(Bukkit.getWorld("ALO"), -426.5, 43, -45.5), EntityType.ENDER_CRYSTAL);
								Bukkit.getWorld("ALO").spawnEntity(new Location(Bukkit.getWorld("ALO"), -392.5, 43, -45.5), EntityType.ENDER_CRYSTAL);
								break;
							case 2:
								break;
							case 3:
								break;
							case 4:
								break;
							default:
								sender.sendMessage("That phase does not exist");
								break;
							}
						}catch(Exception e){
							sender.sendMessage("Invalid Arguments: phase number must be a number");
						}
					}
				}
			}
		}else if(label.equalsIgnoreCase("explode")){
			if(sender instanceof BlockCommandSender){
				BlockCommandSender block = (BlockCommandSender) sender;
				if(args.length < 4){
					block.sendMessage("/explode [x] [y] [z] <power> [setFire] [destroyBlocks]");
				}else if(args.length == 4){
					try{
						int x = Integer.parseInt(args[0]);
						int y = Integer.parseInt(args[1]);
						int z = Integer.parseInt(args[2]);
						int power = Integer.parseInt(args[3]);
						block.getBlock().getWorld().createExplosion(x, y, z, power);
					}catch(Exception e){
						block.sendMessage(ChatColor.RED+"Invalid arguments: Not an integer!");
					}
				}else if(args.length == 5){
					try{
						int x = Integer.parseInt(args[0]);
						int y = Integer.parseInt(args[1]);
						int z = Integer.parseInt(args[2]);
						int power = Integer.parseInt(args[3]);
						boolean setFire = Boolean.parseBoolean(args[4]);
						block.getBlock().getWorld().createExplosion(x, y, z, power, setFire);
					}catch(Exception e){
						block.sendMessage(ChatColor.RED+"Invalid arguments!");
					}
				}else if(args.length == 6){
					try{
						int x = Integer.parseInt(args[0]);
						int y = Integer.parseInt(args[1]);
						int z = Integer.parseInt(args[2]);
						int power = Integer.parseInt(args[3]);
						boolean setFire = Boolean.parseBoolean(args[4]);
						boolean destroyBlocks = Boolean.parseBoolean(args[5]);
						block.getBlock().getWorld().createExplosion(x, y, z, power, setFire, destroyBlocks);
					}catch(Exception e){
						block.sendMessage(ChatColor.RED+"Invalid arguments!");
					}
				}
			}else if(sender instanceof Player){
				Player player = (Player) sender;
				if(args.length < 4){
					player.sendMessage(ChatColor.RED+"/explode [x] [y] [z] <power> [setFire] [destroyBlocks]");
				}else if(args.length == 4){
					try{
						int x = Integer.parseInt(args[0]);
						int y = Integer.parseInt(args[1]);
						int z = Integer.parseInt(args[2]);
						int power = Integer.parseInt(args[3]);
						player.getWorld().createExplosion(new Location(player.getWorld(), x, y, z), power);
					}catch(Exception e){
						player.sendMessage(ChatColor.RED+"Invalid arguments: Not an integer!");
					}
				}else if(args.length == 5){
					try{
						int x = Integer.parseInt(args[0]);
						int y = Integer.parseInt(args[1]);
						int z = Integer.parseInt(args[2]);
						int power = Integer.parseInt(args[3]);
						boolean setFire = Boolean.parseBoolean(args[4]);
						player.getWorld().createExplosion(new Location(player.getWorld(), x, y, z), power, setFire);
					}catch(Exception e){
						player.sendMessage(ChatColor.RED+"Invalid arguments!");
					}
				}else if(args.length == 6){
					try{
						int x = Integer.parseInt(args[0]);
						int y = Integer.parseInt(args[1]);
						int z = Integer.parseInt(args[2]);
						int power = Integer.parseInt(args[3]);
						boolean setFire = Boolean.parseBoolean(args[4]);
						boolean destroyBlocks = Boolean.parseBoolean(args[5]);
						player.getWorld().createExplosion(x, y, z, power, setFire, destroyBlocks);
					}catch(Exception e){
						player.sendMessage(ChatColor.RED+"Invalid arguments!");
					}
				}
			}else{

			}
		}else if(label.equalsIgnoreCase("removedrop")){
			Player player = (Player) sender;
			if(this.getConfig().contains("SAO.Drop_Blacklist")){
				this.getConfig().getStringList("SAO.Drop_Blacklist").add(player.getItemInHand().getType().toString());
				try {
					this.getConfig().save(new File(this.getDataFolder().getPath()+"config"));
				} catch (Exception e) {

				}
			}else{
				this.getConfig().createSection("SAO.Drop_Blacklist");
			}


		}else if(label.equalsIgnoreCase("cutscene")){
			if(sender instanceof Player){
				if(args[0].equalsIgnoreCase("intro")){
					Intro.play(((Player)sender));
				}
			}else{
				if(args[0].equalsIgnoreCase("intro")){
					if(args[1].equalsIgnoreCase("@p")){
						Player target = null;
						double lastDist = Double.MAX_VALUE;
						for(Player p : (((BlockCommandSender) sender).getBlock().getWorld().getPlayers())){
							double dist = p.getLocation().distance(((BlockCommandSender) sender).getBlock().getLocation());
							if(dist < lastDist){
								lastDist = dist;
								target = p;
							}
						}

						if(target != null){
							Intro.play(target);
						}else{

						}
					}else{
						Intro.play(Bukkit.getPlayer(args[0]));
					}

				}
			}
		}else if(label.equalsIgnoreCase("mob")){
			if(!(sender instanceof Player)){

			}else{
				Player player = (Player) sender;
				if(args[0].equalsIgnoreCase("pig")){
					CustomPig.spawnCustomPig(player.getLocation());
				}
			}
		}
		return false;
	}
}

